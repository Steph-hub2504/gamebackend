const WebSocket = require('ws'); // Importation de la biblioth√®que WebSocket

const server = new WebSocket.Server({ port: 8080 }); // Cr√©ation du serveur WebSocket sur le port 8080

let secretNumber = Math.floor(Math.random() * 100) + 1; // Nombre secret initial entre 1 et 100
let players = []; // Liste des sockets des joueurs connect√©s

console.log("üéÆ Serveur WebSocket d√©marr√© sur ws://gamebackend-render.onrender.com");
console.log(`ü§´ Nombre secret g√©n√©r√© : ${secretNumber}`);

server.on('connection', socket => {
    console.log("üë§ Un joueur s'est connect√© !");
    players.push(socket); // Ajouter le joueur √† la liste

    socket.on('message', message => {
        let data = JSON.parse(message);

        if (data.type === "guess") {
            let guess = parseInt(data.number);
            let response = { type: "hint" };

            if (guess === secretNumber) {
                const serverTime = Date.now();
                response = {
                    type: "win",
                    winner: data.player,
                    countdownStart: serverTime + 3000 // 3 secondes plus tard
                };

                console.log(`üèÜ Le joueur ${data.player} a trouv√© le bon nombre : ${secretNumber}`);

                // Envoyer le message de victoire √† tous les joueurs avec le temps de d√©but du compte √† rebours
                players.forEach(player => {
                    player.send(JSON.stringify(response));
                });

                // Attendre 3 secondes avant de lancer une nouvelle partie
                setTimeout(() => {
                    secretNumber = Math.floor(Math.random() * 100) + 1;
                    console.log(`üîÑ Nouveau nombre secret g√©n√©r√© : ${secretNumber}`);

                    players.forEach(player => {
                        player.send(JSON.stringify({ type: "new_game" }));
                    });
                }, 3000); // 3 secondes de pause
            } else if (guess < secretNumber) {
                response.message = "üîº Trop petit ! Essayez un nombre plus grand.";
                socket.send(JSON.stringify(response));
            } else {
                response.message = "üîΩ Trop grand ! Essayez un nombre plus petit.";
                socket.send(JSON.stringify(response));
            }
        }
    });

    socket.on('close', () => {
        players = players.filter(p => p !== socket);
        console.log("‚ùå Un joueur s'est d√©connect√©.");
    });
});
